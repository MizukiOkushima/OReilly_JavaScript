"use strict";

js3_1();

//////////////////////////////////////////////////////////////////////////////////////
// 3.1 概要と定義
//////////////////////////////////////////////////////////////////////////////////////

// 型は大きく分けて基本型とオブジェクト型がある
// 基本型には数値型、文字列、論理型
// nullとundefinedは基本型の値だが数値でも文字列でも論理値でもない特殊な型
// Symbolという特殊型はES6から追加された
// 上記以外の値がオブジェクトでプロパティの集合体
// 書くプロパティは名前と値を持ち、数値、文字列など基本型の値やオブジェクトを保持できる
// 特殊なオブジェクトとしてグローバルオブジェクトがある
// 配列という特殊なオブジェクトも定義されている
// 配列は通常のオブジェクトとは異なる振る舞いもする
// Setオブジェクトは値の集合を表す
// Mapオブジェクトはキーと値のペアを保持する
// バイトなどバイナリデータの配列を扱いやすい型付き配列が用意されている
// RegExp型はテキストパターンを表す
// このテキストパターンを使って文字列に対してマッチング、検索、置換の操作が行える
// Date型は日付と時刻を表し、基本的な日付の計算が出来る
// ErrorとErrorのサブタイプはJavaScriptコードを実行したときに発生したエラーを表す
// JavaScriptでは関数やクラスは単なる構文ではなく、JavaScriptプログラムから関数やクラスを操作できるようになっている
// 基本型値ではないほかの値と同じように、関数やクラスも特別なオブジェクトである
// JavaScriptインタプリタは自動的にガベージコレクションを行いメモリを管理する
// プログラマはオブジェクトなど破棄やメモリ解放について悩む必要はない
// ある値がプログラム中から参照できなくなったときにインタプリタはその値がもう使われないと判断し自動的にメモリを開放します
// つまり必要以上にメモリを使い続けたくない場合には必要ではなくなった値を参照できなくなるようにプログラムを記述する必要がある
// JavaScriptはオブジェクト指向プログラミングスタイルに対応している
// オブジェクト指向とはグローバルに定義された関数を使ってさまざまな型の値を処理するのではなく、その型で定義されたメソッドを使って値を処理するような考え方
// 例えば配列aの要素をソートするにはsort()関数に配列aを引数として渡すのではなく次のように配列aのsort()メソッドを呼び出すのがオブジェクト指向の考え方

a.sort();     // sort(a)のオブジェクト指向的な記述


// JavaScriptの場合メソッドが持てるのはオブジェクトだけである
// 数値や文字列、論理値、Symbol値もメソッドを持つような振る舞いをする
// JavaScriptではnullとundefinedだけはメソッドを呼び出すことができない

// JavaScriptのオブジェクト型は可変型である
// 基本型は不変型である
// オブジェクトのプロパティや配列の要素の値はJavaScriptプログラムから変更可能
// 一方で数値、論理型、Symbol値、null、undefinedは変更することができない
// 例えば、数値の値を変更すること自体意味がない
// 文字列は文字の配列として考えられるので、値を変更できる型と思うかもしれないが文字列は不変型である
// 文字列に対してインデックスを指定して文字を参照可能だが、既存の文字列を変更する方法は用意されていない

// JavaScriptは必要に応じてある方から別の型へ自動変換される
// ==等値演算子では型変換が行われる
// ===同値演算子は型変換が行われないためこちらを使うことが推奨されている

// 定数 const
// 変数 let
// 変数 var は古い
// 定数と変数を宣言するときに代入される値の型を指定しない


//////////////////////////////////////////////////////////////////////////////////////
// 3.2 数値
//////////////////////////////////////////////////////////////////////////////////////

// 数値型は整数とおおよその実数を表す
// JavaScriptではIEEE754標準で規定された64bit浮動小数点形式で数値を表す
// 最大値 ± 1.7976931348623157 × 10^308
// 最小値 ± 5 × 10^−324

// 数値形式は −9,007,199,254,740,992(−2^53) ～ 9,007,199,254,740,992(2^53) までの整数は正確に表せる
// この範囲外の整数を使う場合、下位の制度は損なわれる

// 直接数字を記述する場合、数値リテラルという
// 数値リテラルの前にマイナス記号「-」を記述すると符号を反転できる


//////////////////////////////////////////////////////////////////////////////////////
// 3.2.1 整数リテラル
//////////////////////////////////////////////////////////////////////////////////////

// JavaScriptプログラム中では10進整数は数字を続けて記述できる

0
3
10000000

// 整数を16進数で記述することもできる
// 16進リテラルは先頭が 0x または 0X その後に一連の16進数値が続く
// 16進数値は0から9までの数字とaからf(またはAからF)までの英字
// 英字は10進の10から15に対応

0xff          // 255: (15*16 + 15)
0xBADCAFE     // 195939070

// ES6以降は2進数と8進数も指定可能
// 2進数 0b または 0B
// 8進数 0o または 0O

0b10101       // 21 : (1*16 + 0*8 + 1*4 + 0*2 + 1*1)
0o377         // 255: (3*64 + 7*8 + 7*1)


//////////////////////////////////////////////////////////////////////////////////////
// 3.2.2 浮動小数点リテラル
//////////////////////////////////////////////////////////////////////////////////////

// JavaScript内では浮動小数点リテラルを使って実数を記述する
// 浮動小数点リテラルは小数部や指数も使用可能
// 浮動小数点リテラルは先頭が整数部、次に小数点、その次に小数部という形式
// 指数は先頭が英文字 e または E 、その次に + または - （あってもなくてもよい）、その次に整数指数という形式 小数部を後ろに記述する
// 浮動小数点リテラルの値は選考する整数部と小数部の数値に10を指数部で指定された回数だけ掛けた値になる

[10進数値][.10進数値][(E | e)[(+| -)]10進数値]

// 実例

3.14
2345.6789
.333333333333333333
6.02e23             // 6.02 × 10²³
1.4738223E-32       // 1.4738223 × 10-³²


// 数値リテラルの区切り文字
// 数値リテラル中ではアンダースコアが使用可能
// 長い数値リテラルをアンダースコアで区切って読みやすくできる

let billion = 1_000_000_000;    // アンダースコアで3 桁ごとに区切る
let bytes = 0x89_AB_CD_EF;      // バイト単位で区切る
let bits = 0b0001_1101_0111;    // ニブル単位で区切る
let fraction = 0.123_456_789;   // 小数部でも使用できる


//////////////////////////////////////////////////////////////////////////////////////
// 3.2.3 JavaScriptでの算術演算
//////////////////////////////////////////////////////////////////////////////////////

// JavaScriptでの基本的な算術演算子 + - * / %
// ES6から ** べき乗も使用可能

// 算術演算子以外にも複雑な数学演算を行う関数や定数がたくさん用意されている
// 関数と定数は Math という名前のオブジェクトのプロパティとして定義されている

Math.pow(2, 53)              // 9007199254740992: 2 の 53乗
Math.round(.6)               // 1.0: 最近傍の整数に変換
Math.ceil(.6)                // 1.0: 整数に切り上げ
Math.floor(.6)               // 0.0: 整数に切り捨て
Math.abs(-5)                 // 5: 絶対値
Math.max(x, y, z)            // 引数の中から最大値を返す
Math.min(x, y, z)            // 引数の中から最小値を返す
Math.random()                // 0 以上 1.0 未満の擬似乱数を返す
Math.PI                      // π: 円周率
Math.E                       // e: 自然対数の底
Math.sqrt(3)                 // 3**0.5: 3の平方根
Math.pow(3, 1 / 3)           // 3**(1/3): 3の立方根
Math.sin(0)                  // 三角関数 Math.cos やMath.atan なども
Math.log(10)                 // 10 の自然対数
Math.log(100) / Math.LN10    // 底が 10 の 100 の対数（100 の常用対数）
Math.log(512) / Math.LN2     // 底が 2 の512 の対数
Math.exp(3)                  // Math.E の3 乗

// ES6 から下記の関数も使用可能

Math.cbrt(27)                // 3: 立方根
Math.hypot(3, 4)             // 5: 引数を自乗したものの総和の平方根
Math.log10(100)              // 2: 常用対数
Math.log2(1024)              // 10: 底が 2 の対数
Math.log1p(x)                // (1+x) の自然対数 x が小さい値の場合、こちらが正確
Math.expm1(x)                // Math.exp(x)-1; Math.log1p() の逆関数
Math.sign(x)                 // 引数が0より小さいで0 0より大きいで-1 0、1を返す
Math.imul(2, 3)              // 6: 32 ビット整数の高速乗算
Math.clz32(0xf)              // 28: 32 ビットバイナリ表現での先頭の0 の数
Math.trunc(3.9)              // 3: 小数部を削除して整数に変換する
Math.fround(x)               // 最近傍の32 ビット浮動小数点を返す
Math.sinh(x)                 // 双曲線正弦関数 Math.cosh()、Math.tanh() も
Math.asinh(x)                // 逆双曲線正弦関数 Math.acosh()、Math.atanh() も


function js3_1() {

}