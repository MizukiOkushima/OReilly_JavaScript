"use strict";

js3_1();

//////////////////////////////////////////////////////////////////////////////////////
// 3.1 概要と定義
//////////////////////////////////////////////////////////////////////////////////////

// 型は大きく分けて基本型とオブジェクト型がある
// 基本型には数値型、文字列、論理型
// nullとundefinedは基本型の値だが数値でも文字列でも論理値でもない特殊な型
// Symbolという特殊型はES6から追加された
// 上記以外の値がオブジェクトでプロパティの集合体
// 書くプロパティは名前と値を持ち、数値、文字列など基本型の値やオブジェクトを保持できる
// 特殊なオブジェクトとしてグローバルオブジェクトがある
// 配列という特殊なオブジェクトも定義されている
// 配列は通常のオブジェクトとは異なる振る舞いもする
// Setオブジェクトは値の集合を表す
// Mapオブジェクトはキーと値のペアを保持する
// バイトなどバイナリデータの配列を扱いやすい型付き配列が用意されている
// RegExp型はテキストパターンを表す
// このテキストパターンを使って文字列に対してマッチング、検索、置換の操作が行える
// Date型は日付と時刻を表し、基本的な日付の計算が出来る
// ErrorとErrorのサブタイプはJavaScriptコードを実行したときに発生したエラーを表す
// JavaScriptでは関数やクラスは単なる構文ではなく、JavaScriptプログラムから関数やクラスを操作できるようになっている
// 基本型値ではないほかの値と同じように、関数やクラスも特別なオブジェクトである
// JavaScriptインタプリタは自動的にガベージコレクションを行いメモリを管理する
// プログラマはオブジェクトなど破棄やメモリ解放について悩む必要はない
// ある値がプログラム中から参照できなくなったときにインタプリタはその値がもう使われないと判断し自動的にメモリを開放します
// つまり必要以上にメモリを使い続けたくない場合には必要ではなくなった値を参照できなくなるようにプログラムを記述する必要がある
// JavaScriptはオブジェクト指向プログラミングスタイルに対応している
// オブジェクト指向とはグローバルに定義された関数を使ってさまざまな型の値を処理するのではなく、その型で定義されたメソッドを使って値を処理するような考え方
// 例えば配列aの要素をソートするにはsort()関数に配列aを引数として渡すのではなく次のように配列aのsort()メソッドを呼び出すのがオブジェクト指向の考え方

a.sort();     // sort(a)のオブジェクト指向的な記述


// JavaScriptの場合メソッドが持てるのはオブジェクトだけである
// 数値や文字列、論理値、Symbol値もメソッドを持つような振る舞いをする
// JavaScriptではnullとundefinedだけはメソッドを呼び出すことができない

// JavaScriptのオブジェクト型は可変型である
// 基本型は不変型である
// オブジェクトのプロパティや配列の要素の値はJavaScriptプログラムから変更可能
// 一方で数値、論理型、Symbol値、null、undefinedは変更することができない
// 例えば、数値の値を変更すること自体意味がない
// 文字列は文字の配列として考えられるので、値を変更できる型と思うかもしれないが文字列は不変型である
// 文字列に対してインデックスを指定して文字を参照可能だが、既存の文字列を変更する方法は用意されていない

// JavaScriptは必要に応じてある方から別の型へ自動変換される
// ==等値演算子では型変換が行われる
// ===同値演算子は型変換が行われないためこちらを使うことが推奨されている

// 定数 const
// 変数 let
// 変数 var は古い
// 定数と変数を宣言するときに代入される値の型を指定しない


//////////////////////////////////////////////////////////////////////////////////////
// 3.2 数値
//////////////////////////////////////////////////////////////////////////////////////

// 数値型は整数とおおよその実数を表す
// JavaScriptではIEEE754標準で規定された64bit浮動小数点形式で数値を表す
// 最大値 ± 1.7976931348623157 × 10^308
// 最小値 ± 5 × 10^−324

// 数値形式は −9,007,199,254,740,992(−2^53) ～ 9,007,199,254,740,992(2^53) までの整数は正確に表せる
// この範囲外の整数を使う場合、下位の制度は損なわれる

// 直接数字を記述する場合、数値リテラルという
// 数値リテラルの前にマイナス記号「-」を記述すると符号を反転できる


//////////////////////////////////////////////////////////////////////////////////////
// 3.2.1 整数リテラル
//////////////////////////////////////////////////////////////////////////////////////

// JavaScriptプログラム中では10進整数は数字を続けて記述できる

0
3
10000000

// 整数を16進数で記述することもできる
// 16進リテラルは先頭が 0x または 0X その後に一連の16進数値が続く
// 16進数値は0から9までの数字とaからf(またはAからF)までの英字
// 英字は10進の10から15に対応

0xff          // 255: (15*16 + 15)
0xBADCAFE     // 195939070

// ES6以降は2進数と8進数も指定可能
// 2進数 0b または 0B
// 8進数 0o または 0O

0b10101       // 21 : (1*16 + 0*8 + 1*4 + 0*2 + 1*1)
0o377         // 255: (3*64 + 7*8 + 7*1)


function js3_1() {

}