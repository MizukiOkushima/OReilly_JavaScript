"use strict";

//////////////////////////////////////////////////////////////////////////////////////
// 5 文
//////////////////////////////////////////////////////////////////////////////////////

// 4章では、JavaScript言語のごくのようなものとして、式について解説した
// 同じように本章で解説する文は、JavaScript言語における文章やコマンドに相当するものである
// 英語の文がピリオドで終わるように、JavaScriptの文はセミコロン(2.6章)で終わる
// 式は評価されると値が生成される
// これに対して、文が実行されると何かを生じる

// 「何かを生じる」方法の1つが、副作用を持つ式を評価することである
// 代入や関数呼び出しなどの副作用を持つ式は単独で文になりえる
// このような文を式文と呼ぶ
// 同じような文としては、新たな変数を宣言したり、新たな関数を定義したりする宣言文がある

// JavaScriptプログラムは、実行する文の並び以外の何ものでもない
// デフォルトでは、JavaScriptインタプリタは、記述された順序で文を実行していく
// 「何かを生じる」ためのもう1つの方法は、デフォルトの実行順序を変更することである
// JavaScriptには、このような実行順序を変更するための文(制御文)も以下のようにいくつか用意されている

// 条件文
// if運やswitch文などの条件文では、JavaScriptインタプリタに対して、式の値に応じて文を実行させたり、文をスキップさせたりする

// ループ文 
// while文やfor文などのループ文では、文を繰り返し実行する

// ジャンプ文
// break文やreturn文、throw文などのジャンプ文は、インタプリタに対して、プログラムの別の部分にジャンプするように促す

// これからJavaScriptのさまざまな文について書式を含めて解説する
// 本章の最後の表5-1に構文をまとめておく
// JavaScriptでは、いくつかの文をセミコロンで区切ってまとめたものをプログラムと言う
// つまり、文の使い方を覚えれば、JavaScriptプログラムが書けるようになる

//////////////////////////////////////////////////////////////////////////////////////
// 5.1 式文
//////////////////////////////////////////////////////////////////////////////////////

// JavaScriptで最も簡単な文は副作用を伴う式である
// すでに4章でいくつか見てきたが、代入文がその典型例である

greeting = "Hello " + name;
i *= 3;

// インクリメント演算子(++)やデクリメント演算子(--)を使った式も副作用を持つ
// この2つの演算子は、代入処理と同じように、副作用として変数の値を変更する

counter++;

// delete演算子には、オブジェクトのプロパティを削除するという重要な副作用がある
// したがって、delete演算子は、長い式の一部で使われるというよりは、単独で式文として使われるのが普通である

delete o.x;

// 関数呼び出しも式文の仲間である

console.log(debugMessage);
displaySpinner();           // Webアプリでスピナーを表示するという架空の関数

// 上記の関数呼び出しは式だが、ホスト環境やプログラムの状況に影響を与えるという副作用があるので、これも文の仲間に入る
// 関数に副作用がない場合は、関数を長居式の一部として使ったり、代入文の中で使ったりしない限り、ただ呼び出すだけでは意味がない
// 例えば次に示すように、予言の計算だけをして、その結果を破棄することは、実際にはありえないはずである

Math.cos(x);

// 実際には、この式が単独で使われるのではなく、以下に示すように、求めた値を変数に代入するはずである

cs = Math.cos(x);

// もう一度注意すると、ここまでの例でも示したように、文の最後にはセミコロン(;)を記述するようにすること

//////////////////////////////////////////////////////////////////////////////////////
// 5.2 複合文と空文
//////////////////////////////////////////////////////////////////////////////////////

// カンマ演算子(4.13.7章)を使って複数の式を1つの式にまとめたように、文ブロックを使えば、複数の文を1つの複合文にまとめられる
// 文ブロックは、複数のブロックを中括弧で囲んだものである
// 次の例は、1つの文として扱われる
// JavaScriptにおいて、1つの文しか記述できない部分に文ブロックを記述しても問題ない

{
    x = Math.PI;
    cx = Math.cos(x);
    console.log("cos(π) = " + cx);
}

// この文ブロックについては注意すべき点がいくつかある
// まず、末尾にセミコロンを記述しない
// ブロック内にある個々の文はすべて末尾にセミコロンを記述するが、ブロック自身の末尾にはセミコロンは記述しない
// 次に、ブロック中の行は、中括弧に対してインデント(字下げ)されている
// 必ずしもインデントしなければならないわけではないが、インデントしておけばコードは読みやすく、また理解しやすくなる

// 式の中にほかの式が含まれるのが普通であるのと同じように、文の中にほかの文が含まれるのも普通である
// このような場合、一般的にJavaScriptの文法では1つの文しか記述できないようになっている
// 例えば、whileループの構文では、ループの本体には1つの文しか記述できない
// しかし、文ブロックを使って複合文を記述すれば、任意の数の文を記述できる

// このように複合文を使うことで、JavaScriptの文法は1つの文しか記述できない場所にも、複数の文を記述できるようになる
// 空文は、この反対である
// 1つの文を記述する必要がある場所に、1うも文を記述しないようにするものである
// 空文の書式は次のとおりである

;

// JavaScriptインタプリタは、空文を実行しても何もしない
// 空文は、本体が何もないループなどで役立つことがある
// 次のforループの例を見る(forループについては、5.4.3章参照)

// 配列aを初期化する
for (let i = 0; i < addEventListener.length; a[i++] = 0) ;

// このループでは、すべての処理はa[i++] = 0で行われるため、ループの本体は必要ない
// しかし、JavaScriptの構文では、ループの本体として文が1つ必要なため空文(セミコロンを単独で記述したもの)が使われる

// forループ(またはwhileループやif文)の閉じ丸括弧)の後ろにうっかりセミコロン;を記述すると、原因をなかなか見つけにくいバグになる
// 次の例を見る

if ((a == 0) || (b == 0));      // あれ！この行は何もしていないのに
o = null;                       // この行は正常に実行される

// 意図的に空文を使用する場合は、その旨をコメントしておくことをお勧めする
// 例えば、次のようにコメントする

for (let i = 0; i < a.length; a[i++] = 0) /* 空文 */ ;

